Correcci√≥n y Eficiencia: üéØüé®‚ú®

CORRECCI√ìN: üìå‚Äã

Un programa se considera correcto si:
‚úîÔ∏è‚Äã Realiza la tarea buscada de acuerdo a sus especificaciones. üéØüéØüéØ

T√©cnicas para la correcci√≥n de programas:

ü™ß TESTING:
El testing es el proceso de verificar que un programa o sistema funcione correctamente. Consiste en ejecutar el software para detectar errores o fallos, asegurando que el c√≥digo cumpla con los requisitos especificados. Tambi√©n se eval√∫an los casos l√≠mites del algoritmo.

üêõ DEBUGGING:
Es el proceso de descubrir y reparar la causa del error. Para ello, se dise√±an y aplican pruebas adicionales que permitan conocer y resolver la naturaleza del error. Adem√°s, es com√∫n agregar sentencias adicionales al programa para monitorear su comportamiento en determinados puntos de la ejecuci√≥n.

üì£ WALKTHROUGH:
Implica recorrer el programa frente a una audiencia, explicando su funcionamiento y buscando posibles errores o mejoras.

‚òëÔ∏è‚Äã VERIFICACI√ìN:
Verificar un programa consiste en controlar las precondiciones y postcondiciones asociadas al mismo, asegurando que cumpla con los criterios establecidos. ‚ú®‚ú®‚ú®

EFICIENCIA: üìå‚Äã

Una vez que un algoritmo se considera correcto, el siguiente paso es determinar su eficiencia. ‚ú®üéØüé®

‚è≥‚Äã El an√°lisis de la eficiencia estudia el tiempo que tarda un algoritmo en ejecutarse y la memoria que requiere.

‚ùó Siempre que los valores para medir la eficiencia cambien seg√∫n los valores de entrada (por ejemplo, cortar un bucle a partir de un dato ingresado por teclado), se deben evaluar los casos l√≠mites y los peores casos del algoritmo.

CONSIDERACIONES PARA MEDIR LA EFICIENCIA:

Una instrucci√≥n elemental equivale a 1 UT (Unidad de Tiempo). üéØüé®‚ú®

EJEMPLOS:

Algoritmo de tiempo constante:

aux := 4;               // T(1) = 1 UT
aux := aux * 5;         // T(2) = multiplicaci√≥n + asignaci√≥n = 2 UT
xd := aux;              // T(3) = 1 UT
// TOTAL: 4 UT

Con condicional IF:

aux := 49;              // T(1) = 1 UT
aux := aux * 5;         // T(2) = 2 UT
if (aux > 45) then begin
  // Evaluaci√≥n de condici√≥n del IF: 1 UT
  temp := aux - 5;      // Resta + asignaci√≥n = 2 UT
  x := temp + aux + 2;  // Suma + suma + asignaci√≥n = 3 UT
                        // T(3) = 1 + 2 + 3 = 6 UT
end;
x := x * 10;            // T(4) = 2 UT
// TOTAL: 11 UT

Con condicional ELSE:
La evaluaci√≥n del condicional ELSE es exactamente igual que la del IF. Sin embargo, antes de calcular el tiempo de ejecuci√≥n, se debe identificar si el c√°lculo de memoria y tiempo se realizar√° siguiendo el bloque IF o el bloque ELSE. Se debe considerar siempre la rama que implique m√°s UT.


